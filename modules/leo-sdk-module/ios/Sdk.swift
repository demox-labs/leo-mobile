// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(SdkFFI)
import SdkFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_sdk_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_sdk_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
                throw CancellationError()

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

public enum SdkError {

    
    
    case Generic(message: String)

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeSdkError.lift(error)
    }
}


public struct FfiConverterTypeSdkError: FfiConverterRustBuffer {
    typealias SwiftType = SdkError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SdkError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            message: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SdkError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(message):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(message, into: &buf)
            
        }
    }
}


extension SdkError: Equatable, Hashable {}

extension SdkError: Error { }

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}























private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 24
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_sdk_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_sdk_checksum_func_address_is_valid() != 57199) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_address_to_x_coordinate() != 3111) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_authorize_transaction() != 54700) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_decrypt_ciphertext() != 10196) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_decrypt_record() != 13615) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_decrypt_transition() != 50888) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_encrypt_record() != 16918) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_execute_authorization() != 6083) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_from_seed_unchecked() != 47568) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_is_record_owner() != 6413) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_owns_transition() != 45773) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_private_key_is_valid() != 13231) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_private_key_new() != 49005) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_private_key_to_address() != 60650) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_private_key_to_view_key() != 6841) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_program_is_valid() != 43608) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_program_to_id() != 19068) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_serial_number_string() != 29621) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_sign() != 40687) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_verify() != 28509) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_view_key_is_valid() != 50538) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_sdk_checksum_func_view_key_to_address() != 30987) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}
extension SdkError {
        func toNSError() -> NSError {
            switch self {
            case .Generic(let message):
                return NSError(domain: "SdkErrorDomain", code: -1, userInfo: [NSLocalizedDescriptionKey: message])
            }
        }
    }

@objc(Sdk)
public class Sdk: NSObject {
    @objc public class func addressIsValid(network: String, address: String)  -> Bool {
        return try!  FfiConverterBool.lift(
            try! rustCall() {
        uniffi_sdk_fn_func_address_is_valid(
            FfiConverterString.lower(network),
            FfiConverterString.lower(address),$0)
    }
        )
    }
    @objc public class func addressToXCoordinate(network: String, address: String) throws -> String {
        return try  FfiConverterString.lift(
            try rustCallWithError(FfiConverterTypeSdkError.lift) {
        uniffi_sdk_fn_func_address_to_x_coordinate(
            FfiConverterString.lower(network),
            FfiConverterString.lower(address),$0)
    }
        )
    }
    @objc public class func authorizeTransaction(network: String, privateKey: String, program: String, function: String, inputs: [String], feeCredits: Double, feeRecord: String?, imports: String?) throws -> String {
        return try  FfiConverterString.lift(
            try rustCallWithError(FfiConverterTypeSdkError.lift) {
        uniffi_sdk_fn_func_authorize_transaction(
            FfiConverterString.lower(network),
            FfiConverterString.lower(privateKey),
            FfiConverterString.lower(program),
            FfiConverterString.lower(function),
            FfiConverterSequenceString.lower(inputs),
            FfiConverterDouble.lower(feeCredits),
            FfiConverterOptionString.lower(feeRecord),
            FfiConverterOptionString.lower(imports),$0)
    }
        )
    }
    @objc public class func decryptCiphertext(network: String, viewKey: String, ciphertext: String, tpk: String, programId: String, functionName: String, index: UInt64) throws -> String {
        return try  FfiConverterString.lift(
            try rustCallWithError(FfiConverterTypeSdkError.lift) {
        uniffi_sdk_fn_func_decrypt_ciphertext(
            FfiConverterString.lower(network),
            FfiConverterString.lower(viewKey),
            FfiConverterString.lower(ciphertext),
            FfiConverterString.lower(tpk),
            FfiConverterString.lower(programId),
            FfiConverterString.lower(functionName),
            FfiConverterUInt64.lower(index),$0)
    }
        )
    }
    @objc public class func decryptRecord(network: String, viewKey: String, recordCiphertext: String) throws -> String {
        return try  FfiConverterString.lift(
            try rustCallWithError(FfiConverterTypeSdkError.lift) {
        uniffi_sdk_fn_func_decrypt_record(
            FfiConverterString.lower(network),
            FfiConverterString.lower(viewKey),
            FfiConverterString.lower(recordCiphertext),$0)
    }
        )
    }
    @objc public class func decryptTransition(network: String, viewKey: String, transition: String) throws -> String {
        return try  FfiConverterString.lift(
            try rustCallWithError(FfiConverterTypeSdkError.lift) {
        uniffi_sdk_fn_func_decrypt_transition(
            FfiConverterString.lower(network),
            FfiConverterString.lower(viewKey),
            FfiConverterString.lower(transition),$0)
    }
        )
    }
    @objc public class func encryptRecord(network: String, viewKey: String, recordPlaintext: String) throws -> String {
        return try  FfiConverterString.lift(
            try rustCallWithError(FfiConverterTypeSdkError.lift) {
        uniffi_sdk_fn_func_encrypt_record(
            FfiConverterString.lower(network),
            FfiConverterString.lower(viewKey),
            FfiConverterString.lower(recordPlaintext),$0)
    }
        )
    }
    @objc public class func executeAuthorization(network: String, authorizationJson: String, feeAuthorizationJson: String?, program: String, imports: String?, function: String, restEndpoint: String) throws -> String {
        return try  FfiConverterString.lift(
            try rustCallWithError(FfiConverterTypeSdkError.lift) {
        uniffi_sdk_fn_func_execute_authorization(
            FfiConverterString.lower(network),
            FfiConverterString.lower(authorizationJson),
            FfiConverterOptionString.lower(feeAuthorizationJson),
            FfiConverterString.lower(program),
            FfiConverterOptionString.lower(imports),
            FfiConverterString.lower(function),
            FfiConverterString.lower(restEndpoint),$0)
    }
        )
    }
    @objc public class func fromSeedUnchecked(network: String, seed: Data) throws -> String {
        return try  FfiConverterString.lift(
            try rustCallWithError(FfiConverterTypeSdkError.lift) {
        uniffi_sdk_fn_func_from_seed_unchecked(
            FfiConverterString.lower(network),
            FfiConverterData.lower(seed),$0)
    }
        )
    }
    @objc public class func isRecordOwner(network: String, viewKey: String, addressXCoordinate: String, recordNonce: String, recordOwnerXCoordinate: String)  -> Bool {
        return try!  FfiConverterBool.lift(
            try! rustCall() {
        uniffi_sdk_fn_func_is_record_owner(
            FfiConverterString.lower(network),
            FfiConverterString.lower(viewKey),
            FfiConverterString.lower(addressXCoordinate),
            FfiConverterString.lower(recordNonce),
            FfiConverterString.lower(recordOwnerXCoordinate),$0)
    }
        )
    }
    @objc public class func ownsTransition(network: String, viewKey: String, tpkStr: String, tcmStr: String)  -> Bool {
        return try!  FfiConverterBool.lift(
            try! rustCall() {
        uniffi_sdk_fn_func_owns_transition(
            FfiConverterString.lower(network),
            FfiConverterString.lower(viewKey),
            FfiConverterString.lower(tpkStr),
            FfiConverterString.lower(tcmStr),$0)
    }
        )
    }
    @objc public class func privateKeyIsValid(network: String, privateKey: String)  -> Bool {
        return try!  FfiConverterBool.lift(
            try! rustCall() {
        uniffi_sdk_fn_func_private_key_is_valid(
            FfiConverterString.lower(network),
            FfiConverterString.lower(privateKey),$0)
    }
        )
    }
    @objc public class func privateKeyNew(network: String) throws -> String {
        return try  FfiConverterString.lift(
            try rustCallWithError(FfiConverterTypeSdkError.lift) {
        uniffi_sdk_fn_func_private_key_new(
            FfiConverterString.lower(network),$0)
    }
        )
    }
    @objc public class func privateKeyToAddress(network: String, privateKey: String) throws -> String {
        return try  FfiConverterString.lift(
            try rustCallWithError(FfiConverterTypeSdkError.lift) {
        uniffi_sdk_fn_func_private_key_to_address(
            FfiConverterString.lower(network),
            FfiConverterString.lower(privateKey),$0)
    }
        )
    }
    @objc public class func privateKeyToViewKey(network: String, privateKey: String) throws -> String {
        return try  FfiConverterString.lift(
            try rustCallWithError(FfiConverterTypeSdkError.lift) {
        uniffi_sdk_fn_func_private_key_to_view_key(
            FfiConverterString.lower(network),
            FfiConverterString.lower(privateKey),$0)
    }
        )
    }
    @objc public class func programIsValid(network: String, program: String)  -> Bool {
        return try!  FfiConverterBool.lift(
            try! rustCall() {
        uniffi_sdk_fn_func_program_is_valid(
            FfiConverterString.lower(network),
            FfiConverterString.lower(program),$0)
    }
        )
    }
    @objc public class func programToId(network: String, program: String) throws -> String {
        return try  FfiConverterString.lift(
            try rustCallWithError(FfiConverterTypeSdkError.lift) {
        uniffi_sdk_fn_func_program_to_id(
            FfiConverterString.lower(network),
            FfiConverterString.lower(program),$0)
    }
        )
    }
    @objc public class func serialNumberString(network: String, recordPlaintext: String, privateKey: String, programId: String, recordName: String) throws -> String {
        return try  FfiConverterString.lift(
            try rustCallWithError(FfiConverterTypeSdkError.lift) {
        uniffi_sdk_fn_func_serial_number_string(
            FfiConverterString.lower(network),
            FfiConverterString.lower(recordPlaintext),
            FfiConverterString.lower(privateKey),
            FfiConverterString.lower(programId),
            FfiConverterString.lower(recordName),$0)
    }
        )
    }
    @objc public class func sign(network: String, privateKey: String, message: Data) throws -> String {
        return try  FfiConverterString.lift(
            try rustCallWithError(FfiConverterTypeSdkError.lift) {
        uniffi_sdk_fn_func_sign(
            FfiConverterString.lower(network),
            FfiConverterString.lower(privateKey),
            FfiConverterData.lower(message),$0)
    }
        )
    }
    @objc public class func verify(network: String, signature: String, message: Data, address: String)  -> Bool {
        return try!  FfiConverterBool.lift(
            try! rustCall() {
        uniffi_sdk_fn_func_verify(
            FfiConverterString.lower(network),
            FfiConverterString.lower(signature),
            FfiConverterData.lower(message),
            FfiConverterString.lower(address),$0)
    }
        )
    }
    @objc public class func viewKeyIsValid(network: String, viewKey: String)  -> Bool {
        return try!  FfiConverterBool.lift(
            try! rustCall() {
        uniffi_sdk_fn_func_view_key_is_valid(
            FfiConverterString.lower(network),
            FfiConverterString.lower(viewKey),$0)
    }
        )
    }
    @objc public class func viewKeyToAddress(network: String, viewKey: String) throws -> String {
        return try  FfiConverterString.lift(
            try rustCallWithError(FfiConverterTypeSdkError.lift) {
        uniffi_sdk_fn_func_view_key_to_address(
            FfiConverterString.lower(network),
            FfiConverterString.lower(viewKey),$0)
    }
        )
    }
}
